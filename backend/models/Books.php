<?php

namespace backend\models;

use Yii;
use yii\base\InvalidConfigException;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "books".
 *
 * @property int $id
 * @property string $name
 * @property string $description
 * @property string $image
 * @property string $document
 * @property int $year
 * @property string $author
 * @property int $viewed
 * @property int $status
 * @property int $category_id
 * @property string $date_added
 *
 * @property CategoryBooks $category
 * @property BooksTags[] $booksTags
 * @property Tags[] $tags
 */
class Books extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'books';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['description'], 'string'],
            [['name','description', 'year', 'author', 'category_id'], 'required'],
            [['year', 'viewed', 'status', 'category_id'], 'integer'],
            [['date_added'], 'date', 'format' => 'php:Y-m-d'],
            [['date_added'], 'default', 'value' => date('Y-m-d')],
            [['name', 'image', 'document', 'author'], 'string', 'max' => 255],
            [['category_id'], 'exist', 'skipOnError' => true, 'targetClass' => CategoryBooks::className(), 'targetAttribute' => ['category_id' => 'id']],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Название',
            'description' => 'Описание',
            'image' => 'Изображение',
            'document' => 'Документ',
            'year' => 'Год',
            'author' => 'Автор',
            'viewed' => 'Количество просмотров',
            'status' => 'Статус',
            'category_id' => 'Категория',
            'date_added' => 'Дата добавления',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCategory()
    {
        return $this->hasOne(CategoryBooks::className(), ['id' => 'category_id']);
    }


    public function getTags(){
        try {
            return $this->hasMany(Tags::className(), ['id' => 'tag_id'])->viaTable('books_tags', ['book_id' => 'id']);
        } catch (InvalidConfigException $e) {
        }
    }

    public function getSelectedTags(){
        $selectedIds = $this->getTags()->select('id')->asArray()->all();
        return ArrayHelper::getColumn($selectedIds, 'id');
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getBooksTags()
    {
        return $this->hasMany(BooksTags::className(), ['book_id' => 'id']);
    }

    public function saveImage($filename){
        $this->image = $filename;
        return $this->save(false);
    }

    public function saveDoc($filename){
        $this->document = $filename;
        return $this->save(false);
    }

    public function getImage(){
        if ($this->image){
            $path = "/uploads/images/" .$this->image;
            return $path;
        }
        return '/no-image.png';
    }

    public function deleteImage(){
        $imageUploadModel = new ImageUpload();
        $imageUploadModel->deleteCurrentImage($this->image);
    }

    public function deleteDoc(){
        $DocUploadModel = new DocUpload();
        $DocUploadModel->deleteCurrentDoc($this->document);
    }

    public function beforeDelete()
    {
        $this->deleteImage();
        $this->deleteDoc();
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    public function saveTags(array $tags)
    {
        if (is_array($tags) && !isset($tags)){
            $this->clearCurrentTags();

            foreach ($tags as $tag_id){
                $tag = Tags::findOne($tag_id);
                $this->link('tags', $tag);
            }
        }
    }

    public function clearCurrentTags(){
        BooksTags::deleteAll(['book_id' =>$this->id]);
    }
}
